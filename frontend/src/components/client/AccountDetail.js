import { useState, useEffect } from "react";
import { useParams, Link } from "react-router-dom";

const AccountDetails = () => {
  const { accountId } = useParams();
  const numericAccountId = Number(accountId);
  const [account, setAccount] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    if (isNaN(numericAccountId) || numericAccountId <= 0) {
      setError("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—á–µ—Ç–∞.");
      return;
    }

    const fetchAccountDetails = async () => {
      try {
        setLoading(true);
        setError(null);
        const token = localStorage.getItem("access_token");

        const response = await fetch(
          `http://localhost:8000/profile/accounts/${numericAccountId}`,
          {
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
          }
        );

        if (!response.ok) {
          if (response.status === 401) throw new Error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω.");
          if (response.status === 403) throw new Error("‚ùå –£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.");
          if (response.status === 404) throw new Error("‚ùå –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
          if (response.status === 500) throw new Error("üö® –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.");
          throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å—á–µ—Ç–∞.");
        }

        const data = await response.json();
        setAccount(data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchAccountDetails();
  }, [numericAccountId]);

  if (loading) return <p>‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...</p>;
  if (error) return <p style={{ color: "red", fontWeight: "bold" }}>{error}</p>;

  return (
    <div className="p-4">
      <h1 className="text-2xl font-semibold mb-4">
        üìú –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á–µ—Ç–µ #{numericAccountId}
      </h1>
      <Link
        to="/profile/accounts"
        className="bg-gray-500 text-white p-2 rounded-lg hover:bg-gray-600 mb-4 block"
      >
        ‚¨ÖÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ø–∏—Å–∫—É —Å—á–µ—Ç–æ–≤
      </Link>

      {account ? (
        <div className="border p-4 rounded-lg">
          <p><strong>üÜî ID:</strong> {account.id}</p>
          <p><strong>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:</strong> {account.user_id}</p>
          <p><strong>üè¶ –ë–∞–Ω–∫ ID:</strong> {account.bank_id}</p>
          <p><strong>üí∞ –ë–∞–ª–∞–Ω—Å:</strong> {account.balance} ‚ÇΩ</p>
          <p><strong>üîπ –°—Ç–∞—Ç—É—Å:</strong> {account.status}</p>
          <p><strong>üí≥ –¢–∏–ø —Å—á–µ—Ç–∞:</strong> {account.type}</p>
          <p><strong>üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</strong> {new Date(account.created_at).toLocaleString("ru-RU")}</p>
          <p><strong>üìÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</strong> {new Date(account.updated_at).toLocaleString("ru-RU")}</p>
        </div>
      ) : (
        <p>üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
      )}
    </div>
  );
};

export default AccountDetails;
