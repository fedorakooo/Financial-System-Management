import { useState, useEffect } from "react";
import { useParams, Link } from "react-router-dom";

const LoanTransactions = () => {
  const { loanAccountId } = useParams();
  const numericLoanAccountId = Number(loanAccountId);
  const [transactions, setTransactions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isCreating, setIsCreating] = useState(false);
  const [newTransactionAmount, setNewTransactionAmount] = useState("");

  useEffect(() => {
    if (isNaN(numericLoanAccountId) || numericLoanAccountId <= 0) {
      setError("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫—Ä–µ–¥–∏—Ç–∞.");
      return;
    }

    const fetchTransactions = async () => {
      try {
        setLoading(true);
        setError(null);
        const token = localStorage.getItem("access_token");

        const response = await fetch(
          `http://localhost:8000/profile/accounts/loan_accounts/${numericLoanAccountId}/transactions`,
          {
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
          }
        );

        if (!response.ok) {
          throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.");
        }

        const data = await response.json();
        setTransactions(data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchTransactions();
  }, [numericLoanAccountId]);

  const handleCreateTransaction = async () => {
    try {
      if (!newTransactionAmount || isNaN(parseFloat(newTransactionAmount))) {
        alert("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.");
        return;
      }

      const token = localStorage.getItem("access_token");
      const response = await fetch(
        `http://localhost:8000/profile/accounts/loan_accounts/${numericLoanAccountId}/transactions`,
        {
          method: "POST",
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            amount: parseFloat(newTransactionAmount),
          }),
        }
      );

      if (!response.ok) {
        throw new Error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.");
      }

      const data = await response.json();
      setTransactions([...transactions, data]);
      setIsCreating(false);
      setNewTransactionAmount("");
      alert("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!");
    } catch (err) {
      setError(err.message);
    }
  };

  if (loading) return <p>‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...</p>;
  if (error) return <p style={{ color: "red", fontWeight: "bold" }}>{error}</p>;

  return (
    <div className="p-4">
      <h1 className="text-2xl font-semibold mb-4">
        üìú –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –∫—Ä–µ–¥–∏—Ç—É #{numericLoanAccountId}
      </h1>
      <Link
        to={`/loans/${numericLoanAccountId}`}
        className="bg-gray-500 text-white p-2 rounded-lg hover:bg-gray-600 mb-4 block"
      >
        ‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫—Ä–µ–¥–∏—Ç—É
      </Link>

      {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ */}
      {isCreating ? (
        <div className="mb-4">
          <input
            type="number"
            className="border p-2 rounded mr-2"
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
            value={newTransactionAmount}
            onChange={(e) => setNewTransactionAmount(e.target.value)}
          />

          <button
            className="bg-blue-500 text-white p-2 rounded hover:bg-blue-600 mr-2"
            onClick={handleCreateTransaction}
          >
            ‚úÖ –°–æ–∑–¥–∞—Ç—å
          </button>
          <button
            className="bg-gray-400 text-white p-2 rounded hover:bg-gray-500"
            onClick={() => setIsCreating(false)}
          >
            ‚ùå –û—Ç–º–µ–Ω–∞
          </button>
        </div>
      ) : (
        <button
          className="bg-green-500 text-white p-2 rounded hover:bg-green-600 mb-4"
          onClick={() => setIsCreating(true)}
        >
          ‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        </button>
      )}

      {/* –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π */}
      {transactions.length === 0 ? (
        <p>üì≠ –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</p>
      ) : (
        <div className="mt-4">
          {transactions.map((t) => (
            <div key={t.id} className="border p-2 rounded mb-2">
              <strong>üí∞ –°—É–º–º–∞:</strong> {t.amount} ‚ÇΩ
              <br />
              <strong>üìÖ –î–∞—Ç–∞:</strong> {new Date(t.created_at).toLocaleString("ru-RU")}
              <br />
              <strong>üîπ –¢–∏–ø:</strong> {t.type === "CREDIT" ? "üí∞ –ö—Ä–µ–¥–∏—Ç" : "üí≥ –û–ø–ª–∞—Ç–∞"}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default LoanTransactions;
